{"version":3,"file":"static/js/698.821cf67b.chunk.js","mappings":"6LAwEA,UAnEc,WAEV,IAAAA,GAAwBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAEpBI,GAAkCL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAvCE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAExBG,GAAYC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAGA,EAAMC,aAAaC,YAAY,IAEtEC,QAAQC,IAAIZ,GAgBZ,OACIa,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAAA,WAASG,UAAU,gBAAeD,UAC9BF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,sBAAqBD,UAChCE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,qBAAoBD,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,MAAIG,UAAWV,EAAY,iBAAmB,kBAAkBS,SAAC,WACjEE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,kBAAiBD,SAAA,EAC5BF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,sBAAqBD,UAChCF,EAAAA,EAAAA,KAACK,EAAAA,EAAS,CAACC,WAAS,EAACC,MAAM,kBAAkBC,GAAG,YAAYC,MAAOhB,EAAY,QAAU,UAAWiB,SAAU,SAACC,GAAC,OAAGvB,EAAQuB,EAAEC,OAAOC,MAAM,EAAEA,MAAO1B,OAEvJiB,EAAAA,EAAAA,MAAA,OAAKD,UAAU,sBAAqBD,SAAA,EACpCF,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CAACC,QAAQ,YAAYN,MAAM,UAAUO,QAzB/C,WACjBxB,EAAa,GAADyB,QAAAC,EAAAA,EAAAA,GACL3B,GAAS,CACZJ,KAEJC,EAAQ,GACZ,EAmB2F+B,UAAWhC,EAAKiC,OAAOlB,SAAC,YAG3FF,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CAACC,QAAQ,YAAYN,MAAM,QAAQO,QAAS,kBAAI5B,EAAQ,GAAG,EAAE+B,UAAWhC,EAAKiC,OAAOlB,SAAC,cAI5FE,EAAAA,EAAAA,MAAA,OAAKD,UAAWV,EAAY,sCAAwC,mBAAmBS,SAAA,CAC/D,IAAnBX,EAAU8B,QAAarB,EAAAA,EAAAA,KAAA,MAAIG,UAAWV,EAAY,4BAA8B,6BAA6BS,SAAC,YAAeX,EAAU+B,KAAI,SAACC,EAAKC,GAC9I,OACIpB,EAAAA,EAAAA,MAAA,OAAKD,UAAU,uBAAsBD,SAAA,EACjCF,EAAAA,EAAAA,KAAA,KAAGG,UAAU,SAAQD,SAAEqB,KACvBvB,EAAAA,EAAAA,KAAA,OAAKG,UAAU,iBAAiBa,QAAS,kBA7B5D,SAACS,GAClB,IAAMC,GAAMR,EAAAA,EAAAA,GAAO3B,GACnBmC,EAAOC,OAAOF,EAAO,GACrBjC,EAAakC,EACjB,CAyBqFE,CAAaJ,EAAE,EAACtB,UACzDF,EAAAA,EAAAA,KAAA,KAAG6B,MAAM,oBAH0BL,EAOnD,IACoB,IAAnBjC,EAAU8B,QAAarB,EAAAA,EAAAA,KAAA,OAAKG,UAAU,sBAAqBD,UACxDF,EAAAA,EAAAA,KAACc,EAAAA,EAAM,CAACC,QAAQ,YAAYN,MAAM,QAAQO,QAAS,kBAAIxB,EAAa,GAAG,EAACU,SAAC,kBAGpE,iBAQzC,C","sources":["Components/Task2.js"],"sourcesContent":["import React, { useState } from \"react\"\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Task2 = () => {\r\n\r\n    const [task, setTask] = useState(\"\")\r\n\r\n    const [taskarray, setTaskarray] = useState([])\r\n\r\n    const lightmode = useSelector((state)=>state.productState.daynightmode)\r\n\r\n    console.log(task)\r\n\r\n    const handleSubmit = () => {\r\n        setTaskarray([\r\n            ...taskarray,\r\n            task\r\n        ])\r\n        setTask(\"\")\r\n    }\r\n\r\n    const handleDelete = (index) => {\r\n        const newarr = [...taskarray]\r\n        newarr.splice(index, 1)\r\n        setTaskarray(newarr)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section className=\"outer-section\">\r\n                <div className=\"outer-div-container\">\r\n                    <div className=\"content-holder-div\">\r\n                        <h1 className={lightmode ? \"darkthemecolor\" : \"lightthemecolor\"}>Task2</h1>\r\n                        <div className=\"todo-holder-div\">\r\n                            <div className=\"task-inp-holder-div\">\r\n                                <TextField fullWidth label=\"Enter Your Task\" id=\"fullWidth\" color={lightmode ? \"error\" : \"primary\"} onChange={(e)=>setTask(e.target.value)} value={task} />\r\n                            </div>\r\n                            <div className=\"todo-btn-holder-div\">\r\n                            <Button variant=\"contained\" color=\"success\" onClick={handleSubmit} disabled={!task.trim()}>\r\n                                Submit\r\n                            </Button>\r\n                            <Button variant=\"contained\" color=\"error\" onClick={()=>setTask(\"\")} disabled={!task.trim()}>\r\n                                Reset\r\n                            </Button>\r\n                            </div>\r\n                            <div className={lightmode ? \"tasks-holder-div bg-div-dark-border\" : \"tasks-holder-div\"}>\r\n                                {taskarray.length===0 ? <h1 className={lightmode ? \"no-task-h1 darkthemecolor\" : \"no-task-h1 lightthemecolor\"}>No Task</h1> : taskarray.map((ele, i)=>{\r\n                                    return (\r\n                                        <div className=\"indi-task-holder-div\" key={i}>\r\n                                            <p className=\"task-p\">{ele}</p>\r\n                                            <div className=\"task-close-div\" onClick={()=>handleDelete(i)}>\r\n                                                <i class=\"fa fa-close\"></i>\r\n                                            </div>\r\n                                        </div>\r\n                                    )\r\n                                })}\r\n                                {taskarray.length!==0 ? <div className=\"tasks-all-reset-div\">\r\n                                    <Button variant=\"contained\" color=\"error\" onClick={()=>setTaskarray([])}>\r\n                                        Reset Tasks\r\n                                    </Button>\r\n                                </div> : \"\"}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Task2;"],"names":["_useState","useState","_useState2","_slicedToArray","task","setTask","_useState3","_useState4","taskarray","setTaskarray","lightmode","useSelector","state","productState","daynightmode","console","log","_jsx","_Fragment","children","className","_jsxs","TextField","fullWidth","label","id","color","onChange","e","target","value","Button","variant","onClick","concat","_toConsumableArray","disabled","trim","length","map","ele","i","index","newarr","splice","handleDelete","class"],"sourceRoot":""}